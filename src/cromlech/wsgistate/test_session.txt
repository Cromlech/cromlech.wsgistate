Setting up the crom machinery for the adapters
----------------------------------------------

    >>> import crom
    >>> import cromlech.wsgistate as module
    >>> from crom import testing

    >>> testing.setup()
    >>> crom.configure(module)


Context manager
------------------

Let's import some helpers::

    >>> from webtest import TestApp
    >>> SK = 'session.key'

And our session controller::

    >>> from cromlech.wsgistate import WsgistateSession
    >>> from cromlech.session.controlled import EnvironSession

    >>> def simple_app(environ, start_response):
    ...     """retained visited path, raise exception if path contain 'fail'
    ...     """
    ...     with EnvironSession(environ, SK) as session:
    ...         path = environ['PATH_INFO']
    ...         history = session.setdefault('path', [])
    ...         history.append(path)
    ...         if path == '/fail':
    ...             raise ValueError
    ...     start_response('200 OK', [('Content-type', 'text/plain')])
    ...     return [', '.join(history)]


Then run it with wsgistate middelware:

    >>> from cromlech.wsgistate import session_wrapper
    >>> wsgi_app = TestApp(session_wrapper(simple_app, session_key=SK))
    >>> result = wsgi_app.get('/foo')
    >>> result.status
    '200 OK'
    >>> result.body
    '/foo'

    >>> result = wsgi_app.get('/bar')
    >>> result.status
    '200 OK'
    >>> result.body
    '/foo, /bar'
    
If application raise an exception, the context manager wont save the session::

    >>> result = wsgi_app.get('/fail')
    Traceback (most recent call last):
    ...
    ValueError
    >>> result.status
    '200 OK'
    >>> result.body
    '/foo, /bar'


Testing the transaction awareness
---------------------------------

    >>> import transaction

    >>> def transactional_app(environ, start_response):
    ...
    ...     with transaction.manager as tm:
    ...         with EnvironSession(environ, SK, tm) as session:
    ...             session['crom'] = 'Pyramid'
    ...             tm.abort()
    ...
    ...     assert not session
    ...
    ...     with transaction.manager as tm:
    ...         with EnvironSession(environ, SK, tm) as session:
    ...             session['crom'] = 'Crom'
    ...
    ...     with transaction.manager as tm:
    ...         with EnvironSession(environ, SK, tm) as session:
    ...             session['lech'] = 'Lech'
    ...             sp1 = tm.savepoint()
    ...
    ...             session['crom'] = 'Zope'
    ...             session['lech'] = 'Quack'
    ...             sp2 = tm.savepoint()
    ...
    ...             session['crom'] = 'PHP'
    ...             sp3 = tm.savepoint()
    ...
    ...             sp2.rollback()
    ...             assert session['crom'] == 'Zope'
    ...             assert session['lech'] == 'Quack'
    ...
    ...             session['crom'] = 'Zorglub'
    ...             session['lech'] = 'Zimbabwe'
    ...
    ...             sp1.rollback()
    ...
    ...     start_response('200 OK', [('Content-type', 'text/plain')])
    ...     return [session.get('crom', ''), session.get('lech', '')]

    >>> wsgi_app = TestApp(session_wrapper(transactional_app, session_key=SK))
    >>> result = wsgi_app.get('/bar')
    >>> result.body
    'CromLech'
